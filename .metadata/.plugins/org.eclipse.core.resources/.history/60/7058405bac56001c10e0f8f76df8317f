package com.example.resourceserver.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

//@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true) 
public class EnableWebSecurityConfig extends WebSecurityConfigurerAdapter{
    
	private String clientId;
    private String clientSecret;
    private String introspectionUrl;
	
    EnableWebSecurityConfig(
            @Value("${oauth.clientId}") String clientId,
            @Value("${oauth.clientSecret}") String clientSecret,
            @Value("${oauth.introspectionUrl}") String introspectionUrl) {
    	
    	System.out.println("clientId: " + clientId + 
    			"\n clientSecret: " + clientSecret + 
    			"\n introspectionUrl: " + introspectionUrl);
    	
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.introspectionUrl = introspectionUrl;
    }

    
    @Bean
	@Override
	protected AuthenticationManager authenticationManager() throws Exception {
		return super.authenticationManager();
	}
    
    @Override
	public void configure(HttpSecurity http) throws Exception {
    	http.authorizeRequests(authz -> authz
                .antMatchers(HttpMethod.GET, "clientes").hasAnyRole("USER", "ADMIN")
                .antMatchers(HttpMethod.POST, "clientes").hasAnyRole("USER", "ADMIN")
                .anyRequest().permitAll())
                .oauth2ResourceServer(oauth2 -> oauth2
                        .opaqueToken(token -> token.introspectionUri(introspectionUrl)
                                .introspectionClientCredentials(clientId, clientSecret)
                        )
                );

	}
}
